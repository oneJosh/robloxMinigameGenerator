
local status = game.ReplicatedStorage:WaitForChild("Status") -- Changes status based on value -- 
local text = game.StarterGui.ScreenGui.GameStatus -- Lobby text in GUI --
local CollectionService = game:GetService("CollectionService")
local LobbyArea = game.ServerStorage.LobbyArea.Lobby:Clone() -- Find lobby model in folder LobbyArea
local Players = game:GetService("Players") -- game.Players is OK here, too



function gameChose(gameChosen) -- test function for testing purposes --
	
	-- Checks for the game chosen by checking the model's name --
	if gameChosen.Name == "DisappearingPlates" then
		status.Value = "Game Chosen - " .. "Disappearing Plates"
	end
	
	
end

function generateGame()
	local Minigames = game:GetService("ServerStorage"):WaitForChild("Minigames"):GetChildren()
	return Minigames[math.random(1, #Minigames)]
end

function gameStarter()

	local infinite = true

	repeat
		if #game.Players:GetPlayers() == 1 then
			game.Workspace.LobbyStarter.Disabled = true
			script.Disabled = true
		elseif #game.Players:GetPlayers() == 0 then
			game.Workspace.LobbyStarter.Disabled = false
		end
			
		wait(.25)
		LobbyArea.PrimaryPart = LobbyArea.SpawnLocation
		local position= Vector3.new(0,200,0)
		LobbyArea:SetPrimaryPartCFrame(CFrame.new(position))
		LobbyArea.Parent = workspace
	
		-- Intermission Code --
		local secs = 15
		while secs ~= 0  do
			status.Value = "Intermission (" .. secs .. ")"
			wait(1)
			secs = secs - 1
		end
	
		-- Generate & Display Minigame -- 
	
		local gameChosen = generateGame()
		print(gameChosen)
		gameChose(gameChosen)
	
		wait(5)
	
		-- TELEPROTING AND GENERATING MINGIAME -- 
	

		local minigame = gameChosen:Clone() -- Clones model of minigame --
		local position = Vector3.new(0,50,0)
		minigame.Parent = workspace -- Spawns model --
		minigame:SetPrimaryPartCFrame(CFrame.new(position)) -- Teleports player to Primary part/spawn(s) --
	
	-- Teleport player(s) to game --
		
			for i, player in ipairs(game.Players:GetChildren()) do
				-- Make sure the character exists and its HumanoidRootPart exists
			if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
				CollectionService:AddTag(player, "Alive")
			   -- If CanCollide with humanoids is on, increase y offset by 2 to 5 in order to prevent torso collision --
				player.Character.HumanoidRootPart.CFrame = CFrame.new(Vector3.new(0, minigame.SpawnLocation.CFrame.Y + 5 , 0))
			end
		end
		
		repeat	
			local findInstance = workspace:FindFirstChild(gameChosen.Name)
			if not findInstance then
				print(true) 
				status.Value = "Winners: "
				for i, v in ipairs(CollectionService:GetTagged("Alive")) do
					if (i == #CollectionService:GetTagged("Alive")) then
						status.Value = status.Value .. tostring(v)
						break
					end
					status.Value = status.Value .. tostring(v) .. ", "
				end
			elseif #CollectionService:GetTagged("Alive") == 0 then
				minigame:Destroy()
				status.Value = "No more players are alive!"
				break
			end
			wait(.01)
		until not findInstance 
		wait(10)
		
	until infinite == false
	
end

gameStarter()

